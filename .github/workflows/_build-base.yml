name: _build-base (reusable)
on:
  workflow_call:
    inputs:
      mode: { type: string, required: true }   # pr | main | release
      registry: { type: string, required: true }
      owner: { type: string, required: true }
      base_name: { type: string, required: true }
      # release-only
      release_tag: { type: string, required: false }
      # pr-only
      pr_number: { type: string, required: false }
      short_sha: { type: string, required: false }
    secrets:
      token:
        required: true
    outputs:
      base_ref:            # full tag to use by child images
        description: "Reference of base image to build children from"
        value: ${{ jobs.build-base.outputs.base_ref }}

permissions:
  contents: read
  packages: write

jobs:
  build-base:
    runs-on: ubuntu-latest
    outputs:
      base_ref: ${{ steps.out.outputs.base_ref }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        if: ${{ inputs.mode != 'pr' || (inputs.mode == 'pr' && github.event.pull_request.head.repo.fork == false) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.token }}

      - uses: docker/setup-buildx-action@v3

      - name: Compute tags
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          MODE="${{ inputs.mode }}"
          REG="${{ inputs.registry }}"
          OWN="${{ inputs.owner }}"
          BASE="${{ inputs.base_name }}"
          SHA="${GITHUB_SHA}"
          SHORT="${{ inputs.short_sha }}"
          PR="${{ inputs.pr_number }}"
          REL="${{ inputs.release_tag }}"

          case "$MODE" in
            pr)
              echo "push=$([[ '${{ github.event.pull_request.head.repo.fork }}' == 'false' ]] && echo true || echo false)" >> $GITHUB_OUTPUT
              echo "tags<<EOF" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:pr-${PR}" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:pr-${PR}-sha-${SHORT}" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "base_ref=${REG}/${OWN}/${BASE}:pr-${PR}" >> $GITHUB_OUTPUT
              ;;
            main)
              echo "push=true" >> $GITHUB_OUTPUT
              echo "tags<<EOF" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:latest" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:sha-${SHA}" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "base_ref=${REG}/${OWN}/${BASE}:latest" >> $GITHUB_OUTPUT
              ;;
            release)
              # oczekujemy vX.Y.Z w release_tag
              TAG="${REL#v}"
              MAJOR="$(echo "$TAG" | cut -d. -f1)"
              MINOR="$(echo "$TAG" | cut -d. -f2)"
              echo "push=true" >> $GITHUB_OUTPUT
              echo "tags<<EOF" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:v${TAG}" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:v${MAJOR}.${MINOR}" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:v${MAJOR}" >> $GITHUB_OUTPUT
              echo "${REG}/${OWN}/${BASE}:latest" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "base_ref=${REG}/${OWN}/${BASE}:v${TAG}" >> $GITHUB_OUTPUT
              ;;
            *) echo "Unknown mode: $MODE" >&2; exit 1;;
          esac

      - name: Build & Push base
        uses: docker/build-push-action@v6
        with:
          context: .
          file: containerfiles/Containerfile.base
          push: ${{ steps.tags.outputs.push == 'true' }}
          tags: ${{ steps.tags.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - id: out
        run: echo "base_ref=${{ steps.tags.outputs.base_ref }}" >> $GITHUB_OUTPUT
